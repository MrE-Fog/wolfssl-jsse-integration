package edu.kit.aifb.eorg.wolfssl;

import java.util.HashMap;
import java.util.Map;

/**
 * Encapsulates the list of available cipher suites.
 * 
 * @author S. Mueller (AIFB, Karlsruhe Institute of Technology)
 *
 */
class WolfSSLCipherSuiteList {

	/**
	 * Contains all supported cipher suites. List is also used to validate
	 * cipher suites given by the user.
	 */
	private static final Map<String, WolfSSLCipherSuite> SUPPORTED_CIPHER_SUITES_JAVA = new HashMap<String, WolfSSLCipherSuite>();
	private static final Map<String, WolfSSLCipherSuite> SUPPORTED_CIPHER_SUITES_OPENSSL = new HashMap<String, WolfSSLCipherSuite>();
	private static final String[] SUPPORTED_JAVA;
	private static final String SUPPORTED_WOLFSSL;
	private static final String DELIMITER = ":";

	/*
	 * Cipher suite list taken from the cipher_names[] array in the native
	 * wolfSSL src/internal.c
	 */
	static final WolfSSLCipherSuite TLS_RSA_WITH_AES_128_CBC_SHA = new WolfSSLCipherSuite(
			"TLS_RSA_WITH_AES_128_CBC_SHA", "AES128-SHA");
	static final WolfSSLCipherSuite TLS_RSA_WITH_AES_256_CBC_SHA = new WolfSSLCipherSuite(
			"TLS_RSA_WITH_AES_256_CBC_SHA", "AES256-SHA");
	static final WolfSSLCipherSuite TLS_DHE_RSA_WITH_AES_128_CBC_SHA = new WolfSSLCipherSuite(
			"TLS_DHE_RSA_WITH_AES_128_CBC_SHA", "DHE-RSA-AES128-SHA");
	static final WolfSSLCipherSuite TLS_DHE_RSA_WITH_AES_256_CBC_SHA = new WolfSSLCipherSuite(
			"TLS_DHE_RSA_WITH_AES_256_CBC_SHA", "DHE-RSA-AES256-SHA");
	static final WolfSSLCipherSuite TLS_RSA_WITH_HC_128_MD5 = new WolfSSLCipherSuite("TLS_RSA_WITH_HC_128_MD5",
			"HC128-MD5");
	static final WolfSSLCipherSuite TLS_RSA_WITH_HC_128_SHA = new WolfSSLCipherSuite("TLS_RSA_WITH_HC_128_SHA",
			"HC128-SHA");
	static final WolfSSLCipherSuite TLS_RSA_WITH_HC_128_B2B256 = new WolfSSLCipherSuite("TLS_RSA_WITH_HC_128_B2B256",
			"HC128-B2B256");
	static final WolfSSLCipherSuite TLS_RSA_WITH_AES_128_CBC_B2B256 = new WolfSSLCipherSuite(
			"TLS_RSA_WITH_AES_128_CBC_B2B256", "AES128-B2B256");
	static final WolfSSLCipherSuite TLS_RSA_WITH_AES_256_CBC_B2B256 = new WolfSSLCipherSuite(
			"TLS_RSA_WITH_AES_256_CBC_B2B256", "AES256-B2B256");
	static final WolfSSLCipherSuite TLS_RSA_WITH_RABBIT_SHA = new WolfSSLCipherSuite("TLS_RSA_WITH_RABBIT_SHA",
			"RABBIT-SHA");
	static final WolfSSLCipherSuite TLS_NTRU_RSA_WITH_RC4_128_SHA = new WolfSSLCipherSuite(
			"TLS_NTRU_RSA_WITH_RC4_128_SHA", "NTRU-RC4-SHA");
	static final WolfSSLCipherSuite TLS_NTRU_RSA_WITH_3DES_EDE_CBC_SHA = new WolfSSLCipherSuite(
			"TLS_NTRU_RSA_WITH_3DES_EDE_CBC_SHA", "NTRU-DES-CBC3-SHA");
	static final WolfSSLCipherSuite TLS_NTRU_RSA_WITH_AES_128_CBC_SHA = new WolfSSLCipherSuite(
			"TLS_NTRU_RSA_WITH_AES_128_CBC_SHA", "NTRU-AES128-SHA");
	static final WolfSSLCipherSuite TLS_NTRU_RSA_WITH_AES_256_CBC_SHA = new WolfSSLCipherSuite(
			"TLS_NTRU_RSA_WITH_AES_256_CBC_SHA", "NTRU-AES256-SHA");
	static final WolfSSLCipherSuite TLS_RSA_WITH_AES_128_CCM_8 = new WolfSSLCipherSuite("TLS_RSA_WITH_AES_128_CCM_8",
			"AES128-CCM-8");
	static final WolfSSLCipherSuite TLS_RSA_WITH_AES_256_CCM_8 = new WolfSSLCipherSuite("TLS_RSA_WITH_AES_256_CCM_8",
			"AES256-CCM-8");
	static final WolfSSLCipherSuite TLS_ECDHE_ECDSA_WITH_AES_128_CCM_8 = new WolfSSLCipherSuite(
			"TLS_ECDHE_ECDSA_WITH_AES_128_CCM_8", "ECDHE-ECDSA-AES128-CCM-8");
	static final WolfSSLCipherSuite TLS_ECDHE_ECDSA_WITH_AES_256_CCM_8 = new WolfSSLCipherSuite(
			"TLS_ECDHE_ECDSA_WITH_AES_256_CCM_8", "ECDHE-ECDSA-AES256-CCM-8");
	static final WolfSSLCipherSuite TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA = new WolfSSLCipherSuite(
			"TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA", "ECDHE-RSA-AES128-SHA");
	static final WolfSSLCipherSuite TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA = new WolfSSLCipherSuite(
			"TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA", "ECDHE-RSA-AES256-SHA");
	static final WolfSSLCipherSuite TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA = new WolfSSLCipherSuite(
			"TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA", "ECDHE-ECDSA-AES128-SHA");
	static final WolfSSLCipherSuite TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA = new WolfSSLCipherSuite(
			"TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA", "ECDHE-ECDSA-AES256-SHA");
	static final WolfSSLCipherSuite TLS_ECDHE_RSA_WITH_RC4_128_SHA = new WolfSSLCipherSuite(
			"TLS_ECDHE_RSA_WITH_RC4_128_SHA", "ECDHE-RSA-RC4-SHA");
	static final WolfSSLCipherSuite TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA = new WolfSSLCipherSuite(
			"TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA", "ECDHE-RSA-DES-CBC3-SHA");
	static final WolfSSLCipherSuite TLS_ECDHE_ECDSA_WITH_RC4_128_SHA = new WolfSSLCipherSuite(
			"TLS_ECDHE_ECDSA_WITH_RC4_128_SHA", "ECDHE-ECDSA-RC4-SHA");
	static final WolfSSLCipherSuite TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA = new WolfSSLCipherSuite(
			"TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA", "ECDHE-ECDSA-DES-CBC3-SHA");
	static final WolfSSLCipherSuite TLS_RSA_WITH_AES_128_CBC_SHA256 = new WolfSSLCipherSuite(
			"TLS_RSA_WITH_AES_128_CBC_SHA256", "AES128-SHA256");
	static final WolfSSLCipherSuite TLS_RSA_WITH_AES_256_CBC_SHA256 = new WolfSSLCipherSuite(
			"TLS_RSA_WITH_AES_256_CBC_SHA256", "AES256-SHA256");
	static final WolfSSLCipherSuite TLS_DHE_RSA_WITH_AES_128_CBC_SHA256 = new WolfSSLCipherSuite(
			"TLS_DHE_RSA_WITH_AES_128_CBC_SHA256", "DHE-RSA-AES128-SHA256");
	static final WolfSSLCipherSuite TLS_DHE_RSA_WITH_AES_256_CBC_SHA256 = new WolfSSLCipherSuite(
			"TLS_DHE_RSA_WITH_AES_256_CBC_SHA256", "DHE-RSA-AES256-SHA256");
	static final WolfSSLCipherSuite TLS_ECDH_RSA_WITH_AES_128_CBC_SHA = new WolfSSLCipherSuite(
			"TLS_ECDH_RSA_WITH_AES_128_CBC_SHA", "ECDH-RSA-AES128-SHA");
	static final WolfSSLCipherSuite TLS_ECDH_RSA_WITH_AES_256_CBC_SHA = new WolfSSLCipherSuite(
			"TLS_ECDH_RSA_WITH_AES_256_CBC_SHA", "ECDH-RSA-AES256-SHA");
	static final WolfSSLCipherSuite TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA = new WolfSSLCipherSuite(
			"TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA", "ECDH-ECDSA-AES128-SHA");
	static final WolfSSLCipherSuite TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA = new WolfSSLCipherSuite(
			"TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA", "ECDH-ECDSA-AES256-SHA");
	static final WolfSSLCipherSuite TLS_ECDH_RSA_WITH_RC4_128_SHA = new WolfSSLCipherSuite(
			"TLS_ECDH_RSA_WITH_RC4_128_SHA", "ECDH-RSA-RC4-SHA");
	static final WolfSSLCipherSuite TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA = new WolfSSLCipherSuite(
			"TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA", "ECDH-RSA-DES-CBC3-SHA");
	static final WolfSSLCipherSuite TLS_ECDH_ECDSA_WITH_RC4_128_SHA = new WolfSSLCipherSuite(
			"TLS_ECDH_ECDSA_WITH_RC4_128_SHA", "ECDH-ECDSA-RC4-SHA");
	static final WolfSSLCipherSuite TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA = new WolfSSLCipherSuite(
			"TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA", "ECDH-ECDSA-DES-CBC3-SHA");
	static final WolfSSLCipherSuite TLS_RSA_WITH_AES_128_GCM_SHA256 = new WolfSSLCipherSuite(
			"TLS_RSA_WITH_AES_128_GCM_SHA256", "AES128-GCM-SHA256");
	static final WolfSSLCipherSuite TLS_RSA_WITH_AES_256_GCM_SHA384 = new WolfSSLCipherSuite(
			"TLS_RSA_WITH_AES_256_GCM_SHA384", "AES256-GCM-SHA384");
	static final WolfSSLCipherSuite TLS_DHE_RSA_WITH_AES_128_GCM_SHA256 = new WolfSSLCipherSuite(
			"TLS_DHE_RSA_WITH_AES_128_GCM_SHA256", "DHE-RSA-AES128-GCM-SHA256", 1);
	static final WolfSSLCipherSuite TLS_DHE_RSA_WITH_AES_256_GCM_SHA384 = new WolfSSLCipherSuite(
			"TLS_DHE_RSA_WITH_AES_256_GCM_SHA384", "DHE-RSA-AES256-GCM-SHA384", 1);
	static final WolfSSLCipherSuite TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 = new WolfSSLCipherSuite(
			"TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256", "ECDHE-RSA-AES128-GCM-SHA256");
	static final WolfSSLCipherSuite TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384 = new WolfSSLCipherSuite(
			"TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384", "ECDHE-RSA-AES256-GCM-SHA384");
	static final WolfSSLCipherSuite TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256 = new WolfSSLCipherSuite(
			"TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256", "ECDHE-ECDSA-AES128-GCM-SHA256");
	static final WolfSSLCipherSuite TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384 = new WolfSSLCipherSuite(
			"TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384", "ECDHE-ECDSA-AES256-GCM-SHA384");
	static final WolfSSLCipherSuite TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256 = new WolfSSLCipherSuite(
			"TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256", "ECDH-RSA-AES128-GCM-SHA256");
	static final WolfSSLCipherSuite TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384 = new WolfSSLCipherSuite(
			"TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384", "ECDH-RSA-AES256-GCM-SHA384");
	static final WolfSSLCipherSuite TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256 = new WolfSSLCipherSuite(
			"TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256", "ECDH-ECDSA-AES128-GCM-SHA256");
	static final WolfSSLCipherSuite TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384 = new WolfSSLCipherSuite(
			"TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384", "ECDH-ECDSA-AES256-GCM-SHA384");
	static final WolfSSLCipherSuite TLS_RSA_WITH_CAMELLIA_128_CBC_SHA = new WolfSSLCipherSuite(
			"TLS_RSA_WITH_CAMELLIA_128_CBC_SHA", "CAMELLIA128-SHA");
	static final WolfSSLCipherSuite TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA = new WolfSSLCipherSuite(
			"TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA", "DHE-RSA-CAMELLIA128-SHA");
	static final WolfSSLCipherSuite TLS_RSA_WITH_CAMELLIA_256_CBC_SHA = new WolfSSLCipherSuite(
			"TLS_RSA_WITH_CAMELLIA_256_CBC_SHA", "CAMELLIA256-SHA");
	static final WolfSSLCipherSuite TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA = new WolfSSLCipherSuite(
			"TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA", "DHE-RSA-CAMELLIA256-SHA");
	static final WolfSSLCipherSuite TLS_RSA_WITH_CAMELLIA_128_CBC_SHA256 = new WolfSSLCipherSuite(
			"TLS_RSA_WITH_CAMELLIA_128_CBC_SHA256", "CAMELLIA128-SHA256");
	static final WolfSSLCipherSuite TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA256 = new WolfSSLCipherSuite(
			"TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA256", "DHE-RSA-CAMELLIA128-SHA256");
	static final WolfSSLCipherSuite TLS_RSA_WITH_CAMELLIA_256_CBC_SHA256 = new WolfSSLCipherSuite(
			"TLS_RSA_WITH_CAMELLIA_256_CBC_SHA256", "CAMELLIA256-SHA256");
	static final WolfSSLCipherSuite TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA256 = new WolfSSLCipherSuite(
			"TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA256", "DHE-RSA-CAMELLIA256-SHA256");
	static final WolfSSLCipherSuite TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256 = new WolfSSLCipherSuite(
			"TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256", "ECDHE-RSA-AES128-SHA256");
	static final WolfSSLCipherSuite TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256 = new WolfSSLCipherSuite(
			"TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256", "ECDHE-ECDSA-AES128-SHA256");
	static final WolfSSLCipherSuite TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256 = new WolfSSLCipherSuite(
			"TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256", "ECDH-RSA-AES128-SHA256");
	static final WolfSSLCipherSuite TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256 = new WolfSSLCipherSuite(
			"TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256", "ECDH-ECDSA-AES128-SHA256");
	static final WolfSSLCipherSuite TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384 = new WolfSSLCipherSuite(
			"TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384", "ECDHE-RSA-AES256-SHA384");
	static final WolfSSLCipherSuite TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384 = new WolfSSLCipherSuite(
			"TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384", "ECDHE-ECDSA-AES256-SHA384");
	static final WolfSSLCipherSuite TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384 = new WolfSSLCipherSuite(
			"TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384", "ECDH-RSA-AES256-SHA384");
	static final WolfSSLCipherSuite TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384 = new WolfSSLCipherSuite(
			"TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384", "ECDH-ECDSA-AES256-SHA384");
	static final WolfSSLCipherSuite TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256 = new WolfSSLCipherSuite(
			"TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256", "ECDHE-RSA-CHACHA20-POLY1305");
	static final WolfSSLCipherSuite TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256 = new WolfSSLCipherSuite(
			"TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256", "ECDHE-ECDSA-CHACHA20-POLY1305");
	static final WolfSSLCipherSuite TLS_DHE_RSA_WITH_CHACHA20_POLY1305_SHA256 = new WolfSSLCipherSuite(
			"TLS_DHE_RSA_WITH_CHACHA20_POLY1305_SHA256", "DHE-RSA-CHACHA20-POLY1305");

	static {
		SUPPORTED_CIPHER_SUITES_JAVA.put(TLS_RSA_WITH_AES_128_CBC_SHA.javaString, TLS_RSA_WITH_AES_128_CBC_SHA);
		SUPPORTED_CIPHER_SUITES_JAVA.put(TLS_RSA_WITH_AES_256_CBC_SHA.javaString, TLS_RSA_WITH_AES_256_CBC_SHA);
		SUPPORTED_CIPHER_SUITES_JAVA.put(TLS_DHE_RSA_WITH_AES_128_CBC_SHA.javaString, TLS_DHE_RSA_WITH_AES_128_CBC_SHA);
		SUPPORTED_CIPHER_SUITES_JAVA.put(TLS_DHE_RSA_WITH_AES_256_CBC_SHA.javaString, TLS_DHE_RSA_WITH_AES_256_CBC_SHA);
		SUPPORTED_CIPHER_SUITES_JAVA.put(TLS_RSA_WITH_HC_128_MD5.javaString, TLS_RSA_WITH_HC_128_MD5);
		SUPPORTED_CIPHER_SUITES_JAVA.put(TLS_RSA_WITH_HC_128_SHA.javaString, TLS_RSA_WITH_HC_128_SHA);
		SUPPORTED_CIPHER_SUITES_JAVA.put(TLS_RSA_WITH_HC_128_B2B256.javaString, TLS_RSA_WITH_HC_128_B2B256);
		SUPPORTED_CIPHER_SUITES_JAVA.put(TLS_RSA_WITH_AES_128_CBC_B2B256.javaString, TLS_RSA_WITH_AES_128_CBC_B2B256);
		SUPPORTED_CIPHER_SUITES_JAVA.put(TLS_RSA_WITH_AES_256_CBC_B2B256.javaString, TLS_RSA_WITH_AES_256_CBC_B2B256);
		SUPPORTED_CIPHER_SUITES_JAVA.put(TLS_RSA_WITH_RABBIT_SHA.javaString, TLS_RSA_WITH_RABBIT_SHA);
		SUPPORTED_CIPHER_SUITES_JAVA.put(TLS_NTRU_RSA_WITH_RC4_128_SHA.javaString, TLS_NTRU_RSA_WITH_RC4_128_SHA);
		SUPPORTED_CIPHER_SUITES_JAVA.put(TLS_NTRU_RSA_WITH_3DES_EDE_CBC_SHA.javaString,
				TLS_NTRU_RSA_WITH_3DES_EDE_CBC_SHA);
		SUPPORTED_CIPHER_SUITES_JAVA.put(TLS_NTRU_RSA_WITH_AES_128_CBC_SHA.javaString,
				TLS_NTRU_RSA_WITH_AES_128_CBC_SHA);
		SUPPORTED_CIPHER_SUITES_JAVA.put(TLS_NTRU_RSA_WITH_AES_256_CBC_SHA.javaString,
				TLS_NTRU_RSA_WITH_AES_256_CBC_SHA);
		SUPPORTED_CIPHER_SUITES_JAVA.put(TLS_RSA_WITH_AES_128_CCM_8.javaString, TLS_RSA_WITH_AES_128_CCM_8);
		SUPPORTED_CIPHER_SUITES_JAVA.put(TLS_RSA_WITH_AES_256_CCM_8.javaString, TLS_RSA_WITH_AES_256_CCM_8);
		SUPPORTED_CIPHER_SUITES_JAVA.put(TLS_ECDHE_ECDSA_WITH_AES_128_CCM_8.javaString,
				TLS_ECDHE_ECDSA_WITH_AES_128_CCM_8);
		SUPPORTED_CIPHER_SUITES_JAVA.put(TLS_ECDHE_ECDSA_WITH_AES_256_CCM_8.javaString,
				TLS_ECDHE_ECDSA_WITH_AES_256_CCM_8);
		SUPPORTED_CIPHER_SUITES_JAVA.put(TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA.javaString,
				TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA);
		SUPPORTED_CIPHER_SUITES_JAVA.put(TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA.javaString,
				TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA);
		SUPPORTED_CIPHER_SUITES_JAVA.put(TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA.javaString,
				TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA);
		SUPPORTED_CIPHER_SUITES_JAVA.put(TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA.javaString,
				TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA);
		SUPPORTED_CIPHER_SUITES_JAVA.put(TLS_ECDHE_RSA_WITH_RC4_128_SHA.javaString, TLS_ECDHE_RSA_WITH_RC4_128_SHA);
		SUPPORTED_CIPHER_SUITES_JAVA.put(TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA.javaString,
				TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA);
		SUPPORTED_CIPHER_SUITES_JAVA.put(TLS_ECDHE_ECDSA_WITH_RC4_128_SHA.javaString, TLS_ECDHE_ECDSA_WITH_RC4_128_SHA);
		SUPPORTED_CIPHER_SUITES_JAVA.put(TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA.javaString,
				TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA);
		SUPPORTED_CIPHER_SUITES_JAVA.put(TLS_RSA_WITH_AES_128_CBC_SHA256.javaString, TLS_RSA_WITH_AES_128_CBC_SHA256);
		SUPPORTED_CIPHER_SUITES_JAVA.put(TLS_RSA_WITH_AES_256_CBC_SHA256.javaString, TLS_RSA_WITH_AES_256_CBC_SHA256);
		SUPPORTED_CIPHER_SUITES_JAVA.put(TLS_DHE_RSA_WITH_AES_128_CBC_SHA256.javaString,
				TLS_DHE_RSA_WITH_AES_128_CBC_SHA256);
		SUPPORTED_CIPHER_SUITES_JAVA.put(TLS_DHE_RSA_WITH_AES_256_CBC_SHA256.javaString,
				TLS_DHE_RSA_WITH_AES_256_CBC_SHA256);
		SUPPORTED_CIPHER_SUITES_JAVA.put(TLS_ECDH_RSA_WITH_AES_128_CBC_SHA.javaString,
				TLS_ECDH_RSA_WITH_AES_128_CBC_SHA);
		SUPPORTED_CIPHER_SUITES_JAVA.put(TLS_ECDH_RSA_WITH_AES_256_CBC_SHA.javaString,
				TLS_ECDH_RSA_WITH_AES_256_CBC_SHA);
		SUPPORTED_CIPHER_SUITES_JAVA.put(TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA.javaString,
				TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA);
		SUPPORTED_CIPHER_SUITES_JAVA.put(TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA.javaString,
				TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA);
		SUPPORTED_CIPHER_SUITES_JAVA.put(TLS_ECDH_RSA_WITH_RC4_128_SHA.javaString, TLS_ECDH_RSA_WITH_RC4_128_SHA);
		SUPPORTED_CIPHER_SUITES_JAVA.put(TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA.javaString,
				TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA);
		SUPPORTED_CIPHER_SUITES_JAVA.put(TLS_ECDH_ECDSA_WITH_RC4_128_SHA.javaString, TLS_ECDH_ECDSA_WITH_RC4_128_SHA);
		SUPPORTED_CIPHER_SUITES_JAVA.put(TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA.javaString,
				TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA);
		SUPPORTED_CIPHER_SUITES_JAVA.put(TLS_RSA_WITH_AES_128_GCM_SHA256.javaString, TLS_RSA_WITH_AES_128_GCM_SHA256);
		SUPPORTED_CIPHER_SUITES_JAVA.put(TLS_RSA_WITH_AES_256_GCM_SHA384.javaString, TLS_RSA_WITH_AES_256_GCM_SHA384);
		SUPPORTED_CIPHER_SUITES_JAVA.put(TLS_DHE_RSA_WITH_AES_128_GCM_SHA256.javaString,
				TLS_DHE_RSA_WITH_AES_128_GCM_SHA256);
		SUPPORTED_CIPHER_SUITES_JAVA.put(TLS_DHE_RSA_WITH_AES_256_GCM_SHA384.javaString,
				TLS_DHE_RSA_WITH_AES_256_GCM_SHA384);
		SUPPORTED_CIPHER_SUITES_JAVA.put(TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256.javaString,
				TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256);
		SUPPORTED_CIPHER_SUITES_JAVA.put(TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384.javaString,
				TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384);
		SUPPORTED_CIPHER_SUITES_JAVA.put(TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256.javaString,
				TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256);
		SUPPORTED_CIPHER_SUITES_JAVA.put(TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384.javaString,
				TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384);
		SUPPORTED_CIPHER_SUITES_JAVA.put(TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256.javaString,
				TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256);
		SUPPORTED_CIPHER_SUITES_JAVA.put(TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384.javaString,
				TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384);
		SUPPORTED_CIPHER_SUITES_JAVA.put(TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256.javaString,
				TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256);
		SUPPORTED_CIPHER_SUITES_JAVA.put(TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384.javaString,
				TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384);
		SUPPORTED_CIPHER_SUITES_JAVA.put(TLS_RSA_WITH_CAMELLIA_128_CBC_SHA.javaString,
				TLS_RSA_WITH_CAMELLIA_128_CBC_SHA);
		SUPPORTED_CIPHER_SUITES_JAVA.put(TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA.javaString,
				TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA);
		SUPPORTED_CIPHER_SUITES_JAVA.put(TLS_RSA_WITH_CAMELLIA_256_CBC_SHA.javaString,
				TLS_RSA_WITH_CAMELLIA_256_CBC_SHA);
		SUPPORTED_CIPHER_SUITES_JAVA.put(TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA.javaString,
				TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA);
		SUPPORTED_CIPHER_SUITES_JAVA.put(TLS_RSA_WITH_CAMELLIA_128_CBC_SHA256.javaString,
				TLS_RSA_WITH_CAMELLIA_128_CBC_SHA256);
		SUPPORTED_CIPHER_SUITES_JAVA.put(TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA256.javaString,
				TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA256);
		SUPPORTED_CIPHER_SUITES_JAVA.put(TLS_RSA_WITH_CAMELLIA_256_CBC_SHA256.javaString,
				TLS_RSA_WITH_CAMELLIA_256_CBC_SHA256);
		SUPPORTED_CIPHER_SUITES_JAVA.put(TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA256.javaString,
				TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA256);
		SUPPORTED_CIPHER_SUITES_JAVA.put(TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256.javaString,
				TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256);
		SUPPORTED_CIPHER_SUITES_JAVA.put(TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256.javaString,
				TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256);
		SUPPORTED_CIPHER_SUITES_JAVA.put(TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256.javaString,
				TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256);
		SUPPORTED_CIPHER_SUITES_JAVA.put(TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256.javaString,
				TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256);
		SUPPORTED_CIPHER_SUITES_JAVA.put(TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384.javaString,
				TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384);
		SUPPORTED_CIPHER_SUITES_JAVA.put(TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384.javaString,
				TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384);
		SUPPORTED_CIPHER_SUITES_JAVA.put(TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384.javaString,
				TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384);
		SUPPORTED_CIPHER_SUITES_JAVA.put(TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384.javaString,
				TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384);
		SUPPORTED_CIPHER_SUITES_JAVA.put(TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256.javaString,
				TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256);
		SUPPORTED_CIPHER_SUITES_JAVA.put(TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256.javaString,
				TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256);
		SUPPORTED_CIPHER_SUITES_JAVA.put(TLS_DHE_RSA_WITH_CHACHA20_POLY1305_SHA256.javaString,
				TLS_DHE_RSA_WITH_CHACHA20_POLY1305_SHA256);

		// Create the OpenSSL mapping
		for (WolfSSLCipherSuite cs : SUPPORTED_CIPHER_SUITES_JAVA.values())
			SUPPORTED_CIPHER_SUITES_OPENSSL.put(cs.wolfSSLString, cs);

		SUPPORTED_JAVA = SUPPORTED_CIPHER_SUITES_JAVA.keySet().toArray(new String[SUPPORTED_CIPHER_SUITES_JAVA.size()]);

		String convertedSuites = "";
		try {
			convertedSuites = getWolfSSLCipherSuiteList(SUPPORTED_JAVA);
		} catch (Exception e) {
			System.exit(1);
		}
		SUPPORTED_WOLFSSL = convertedSuites;
	}

	/**
	 * Private constructor.
	 */
	private WolfSSLCipherSuiteList() {
		// Do nothing
	}

	/**
	 * Gets the supported cipher suites as a wolfSSL compatible list.
	 * 
	 * @return All supported cipher suites.
	 */
	public static String getWolfSSLCipherSuiteList() {
		return SUPPORTED_WOLFSSL;
	}

	/**
	 * Converts the given JSSE cipher suite list to a wolfSSL cipher suite list.
	 * 
	 * @param javaCipherSuites
	 *            JSSE compatible cipher suite list.
	 * @return WolfSSL cipher suite list.
	 */
	public static String getWolfSSLCipherSuiteList(String[] javaCipherSuites) {
		StringBuilder sb = new StringBuilder();
		boolean appendSimicolon = false;
		for (String cipherSuite : javaCipherSuites) {
			WolfSSLCipherSuite cs = SUPPORTED_CIPHER_SUITES_JAVA.get(cipherSuite);
			if (cs == null)
				continue;

			if (appendSimicolon)
				sb.append(DELIMITER);

			sb.append(cs.wolfSSLString);
			appendSimicolon = true;
		}

		return sb.toString();
	}

	/**
	 * Gets the supported cipher suites as a JSSE compatible list.
	 * 
	 * @return All supported cipher suites.
	 */
	public static String[] getJavaCipherSuiteList() {
		return SUPPORTED_JAVA;
	}

	/**
	 * Converts the given wolfSSL cipher suite list to a JSSE cipher suite list.
	 * 
	 * @param wolfSSLCipherSuites
	 *            WolfSSL cipher suite list.
	 * @return JSSE cipher suite list.
	 */
	public static String[] getJavaCipherSuiteList(String wolfSSLCipherSuites) {
		if (wolfSSLCipherSuites == null || wolfSSLCipherSuites.isEmpty())
			return null;

		int size;
		String[] javaCipherSuites;
		if (!wolfSSLCipherSuites.contains(DELIMITER)) {
			javaCipherSuites = new String[] { wolfSSLCipherSuites };
			size = 1;
		} else {
			javaCipherSuites = wolfSSLCipherSuites.split(DELIMITER);
			size = wolfSSLCipherSuites.length();
		}

		for (int i = 0; i < size; i++) {
			WolfSSLCipherSuite cs = SUPPORTED_CIPHER_SUITES_OPENSSL.get(javaCipherSuites[i]);
			if (cs == null)
				continue;

			javaCipherSuites[i] = cs.javaString;
		}

		return javaCipherSuites;
	}
}
